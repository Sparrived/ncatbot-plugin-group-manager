name: Release on Version Change

on:
  push:
    branches:
      - master
    paths:
      - "__init__.py"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Detect version change
        id: version
        run: |
          # Get the current version from __init__.py
          NEW_VERSION=$(python -c "import re; content = open('__init__.py').read(); match = re.search(r'__version__\s*=\s*['\''\"'\'']([^'\''\"'\'']+)['\''\"'\'']', content); print(match.group(1) if match else '')")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

          # Try to get the previous version
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            OLD_VERSION=$(git show HEAD^:__init__.py 2>/dev/null | python -c "import sys, re; content = sys.stdin.read(); match = re.search(r'__version__\s*=\s*['\''\"'\'']([^'\''\"'\'']+)['\''\"'\'']', content); print(match.group(1) if match else '')" || echo "")
          else
            OLD_VERSION=""
          fi
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT

          # Check if version changed
          if [ "$NEW_VERSION" = "$OLD_VERSION" ] || [ -z "$NEW_VERSION" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged (${NEW_VERSION}), skipping release."
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from ${OLD_VERSION} to ${NEW_VERSION}"
          fi

      - name: Prepare changelog
        if: steps.version.outputs.changed == 'true'
        id: changelog
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          OLD_VERSION="${{ steps.version.outputs.old_version }}"
          TAG_NAME="v${NEW_VERSION}"

          # Find the previous tag
          if [ -n "$OLD_VERSION" ] && git rev-parse "v${OLD_VERSION}" >/dev/null 2>&1; then
            PREV_REF="v${OLD_VERSION}"
          else
            PREV_REF=$(git tag --list 'v*' --sort=-v:refname | head -n 1 || echo "")
          fi

          # Generate changelog
          if [ -n "$PREV_REF" ]; then
            git log "$PREV_REF"..HEAD --pretty=format:'- %h %s (%an)' --no-merges > RELEASE_NOTES.md
          else
            git log --pretty=format:'- %h %s (%an)' --no-merges > RELEASE_NOTES.md
          fi

          # Add default message if no changes
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "- No code changes since last release." > RELEASE_NOTES.md
          fi

          # Add cc message
          echo "" >> RELEASE_NOTES.md
          echo "cc @Sparrived" >> RELEASE_NOTES.md

          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        if: steps.version.outputs.changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.tag_name }}
          name: ${{ steps.changelog.outputs.tag_name }}
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
